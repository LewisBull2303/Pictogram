"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Check if 'env.py' file exists and import it
if os.path.exists('env.py'):
    import env

# Cloudinary configuration for media storage
CLOUDINARY_STORAGE = {
    'CLOUDINARY_URL': os.environ.get('CLOUDINARY_URL')
}

# Define media URL for file serving
MEDIA_URL = 'media/'

# Use Cloudinary for default file storage
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'
STATICFILES_STORAGE = 'cloudinary_storage.storage.StaticCloudinaryStorage'

# Define the base directory for the project
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# Secret key for production (keep it secret)
SECRET_KEY = os.environ['SECRET_KEY']

# Debugging setting - should be False in production
DEBUG = False

# Security setting for iframe embedding
X_FRAME_OPTIONS = 'ALLOW-FROM https://ui.dev/amiresponsive'

# List of allowed hosts (IP addresses, domains)
ALLOWED_HOSTS = ['127.0.0.1', 'https://pictogram-project5-4fab6a1a47d8.herokuapp.com/','pictogram-project5-4fab6a1a47d8.herokuapp.com', 'localhost']

# Trusted origins for CSRF protection
CSRF_TRUSTED_ORIGINS = ['https://localhost:3000', 'https://pictogram-project5-4fab6a1a47d8.herokuapp.com/','http://pictogram-project5-4fab6a1a47d8.herokuapp.com']

# Custom user model for authentication
AUTH_USER_MODEL = 'base.Users'

# JWT configuration for user authentication
SIMPLE_JWT = {
    "USER_ID_FIELD":'username'
}

# Application definition - list of installed apps
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    'cloudinary_storage',
    "django.contrib.staticfiles",
    'cloudinary',
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt",
    "base",
]

# Rest framework authentication classes
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'base.authenticate.CookiesAuthentication',
    )
}

# Middleware settings for request/response processing
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware',
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# List of allowed origins for CORS
CORS_ALLOWED_ORIGINS = [
    "https://localhost:3000",
    "http://localhost:3000",
    "https://3000-lewisbull2303-instagram-spjqg3hzjk.app.codeanywhere.com",
    "https://8000-lewisbull2303-instagram-spjqg3hzjk.app.codeanywhere.com",
    "http://127.0.0.1:8000",
    'https://pictogram-project5-4fab6a1a47d8.herokuapp.com',
]

# Allow credentials in CORS requests
CORS_ALLOW_CREDENTIALS = True

# URL configuration for routing
ROOT_URLCONF = "backend.urls"

# Template settings
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'staticfiles', 'build')],  # Directory for HTML files
        "APP_DIRS": True,  # Look for templates in app directories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# WSGI application for the project
WSGI_APPLICATION = "backend.wsgi.application"


# Database configuration
# If in development, use SQLite, otherwise use PostgreSQL from DATABASE_URL
if 'DEV' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
else:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get("DATABASE_URL"))
    }
    print("connected")

# Password validation settings
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Localization settings
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files settings (CSS, JavaScript, Images)
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / 'staticfiles'
WHITENOISE_ROOT = BASE_DIR / 'staticfiles' / 'build'

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"